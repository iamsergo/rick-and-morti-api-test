{"version":3,"sources":["store/ducks/characters/types.ts","store/ducks/characters/reducers.ts","store/ducks/characters/actions.ts","store/ducks/characters/index.ts","store/rootReducer.ts","api/characters.ts","api/index.ts","store/sagas/characters.ts","store/sagas/rootSaga.ts","store/index.ts","components/FilterForm/index.tsx","components/CharactersList/index.tsx","hooks/useInfiniteScroll.ts","components/CharacterDialog/index.tsx","App.tsx","index.tsx"],"names":["FETCH_CHARACTERS","FETCH_CHARACTERS_SUCCESS","FETCH_CHARACTERS_FAIL","SET_FILTERS","SET_CURRENT_CHARACTER","charactersInitialState","isLoading","hasError","currentPage","filters","name","species","type","gender","status","characters","pagination","characterModalInitialState","currentCharacter","reducer","combineReducers","state","action","types","payload","info","results","modal","fetchCharacters","params","fetchCharactersSuccess","data","fetchCharactersFail","setFilters","setCurrentCharacter","character","rootReducer","charactersReducer","getCharacters","a","page","url","Object","entries","filter","forEach","key","value","fetch","res","json","api","charactersSaga","error","put","charactersOperations","takeEvery","charactersTypes","rootSaga","all","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","enhancer","applyMiddleware","store","createStore","run","FilterForm","dispatch","useDispatch","useSelector","s","formik","useFormik","initialValues","onSubmit","fs","fromEntries","Box","component","sx","p","handleSubmit","Typography","variant","TextField","disabled","mb","fullWidth","label","values","onChange","handleChange","select","MenuItem","display","Button","onClick","resetForm","ml","color","CharactersList","requestCharacters","observedRef","listener","prevRef","React","useRef","ref","useEffect","current","options","root","rootMargin","innerHeight","threshold","observer","IntersectionObserver","isIntersecting","observe","disconnect","useInfiniteScroll","next","List","dense","ListSubheader","IconButton","scrollTo","top","behavior","length","count","map","i","ListItem","ListItemButton","ListItemAvatar","Avatar","alt","src","image","ListItemText","primary","secondary","id","CharacterDialog","Dialog","open","onClose","DialogTitle","DialogContent","style","width","Chip","mt","mr","origin","icon","location","App","Container","maxWidth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e5967a5.chunk.js","sourcesContent":["const FETCH_CHARACTERS = 'characters/characters/fetch/characters';\nconst FETCH_CHARACTERS_SUCCESS = 'characters/characters/fetch/characters/success';\nconst FETCH_CHARACTERS_FAIL = 'characters/characters/fetch/characters/fail';\n\nconst SET_FILTERS = 'characters/characters/set/filters';\n\nconst SET_CURRENT_CHARACTER = 'characters/modal/set/current-character';\n\nexport {\n  FETCH_CHARACTERS,\n  FETCH_CHARACTERS_SUCCESS,\n  FETCH_CHARACTERS_FAIL,\n  SET_FILTERS,\n  SET_CURRENT_CHARACTER,\n};","import { combineReducers } from 'redux';\nimport { Info } from '../../../types/api';\nimport { CharacterFiltersForForm } from '../../../types/api/characters';\nimport { Character } from '../../../types/entities/characters';\nimport * as types from './types';\n\nexport type CharactersState = {\n  isLoading: boolean\n  hasError: boolean\n  currentPage: number\n  filters: CharacterFiltersForForm\n  characters: Character[]\n  pagination: Info | null\n};\n\nconst charactersInitialState: CharactersState = {\n  isLoading: false,\n  hasError: false,\n  currentPage: 0,\n  filters: {\n    name: '',\n    species: '',\n    type: '',\n    gender: '',\n    status: '',\n  },\n  characters: [],\n  pagination: null,\n};\n\nconst charactersReducer = (state: CharactersState = charactersInitialState, action: any) => {\n  switch(action.type)\n  {\n    case types.FETCH_CHARACTERS:\n      return {\n        ...state,\n        isLoading: true,\n        hasError: false,\n        currentPage: state.currentPage + 1,\n      };\n\n    case types.FETCH_CHARACTERS_FAIL:\n      return {\n        ...state,\n        isLoading: false,\n        hasError: true,\n        currentPage: state.currentPage - 1,\n      };\n\n    case types.FETCH_CHARACTERS_SUCCESS:\n      const { info, results } = action.payload;\n      return {\n        ...state,\n        isLoading: false,\n        hasError: false,\n        characters: [\n          ...state.characters,\n          ...results,\n        ],\n        pagination: info,\n      };\n\n    case types.SET_FILTERS:\n      return {\n        ...state,\n        filters: action.payload,\n\n        currentPage: 0,\n        characters: [],\n        pagination: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\n\nexport type CharacterModalState = {\n  currentCharacter: Character | null\n};\n\nconst characterModalInitialState = {\n  currentCharacter: null,\n};\n\nconst charactersModalReducer = (state: CharacterModalState = characterModalInitialState, action: any) => {\n  switch(action.type)\n  {\n    case types.SET_CURRENT_CHARACTER:\n      return {\n        ...state,\n        currentCharacter: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst reducer = combineReducers({\n  characters: charactersReducer,\n  modal: charactersModalReducer,\n});\n\nexport default reducer;","import { CharacterFilters, CharacterRequestFilters, CharacterResponse } from '../../../types/api/characters';\nimport { Character } from '../../../types/entities/characters';\nimport * as types from './types';\n\nconst fetchCharacters = (params: CharacterRequestFilters) => ({\n  type: types.FETCH_CHARACTERS,\n  payload: params,\n});\n\nconst fetchCharactersSuccess = (data: CharacterResponse) => ({\n  type: types.FETCH_CHARACTERS_SUCCESS,\n  payload: data,\n});\n\nconst fetchCharactersFail = () => ({\n  type: types.FETCH_CHARACTERS_FAIL,\n});\n\nconst setFilters = (filters: CharacterFilters) => ({\n  type: types.SET_FILTERS,\n  payload: filters,\n});\n\nconst setCurrentCharacter = (character: Character | null) => ({\n  type: types.SET_CURRENT_CHARACTER,\n  payload: character,\n});\n\nexport {\n  fetchCharacters,\n  fetchCharactersSuccess,\n  fetchCharactersFail,\n  setFilters,\n  setCurrentCharacter,\n}","import reducer from './reducers';\n\nimport * as charactersOperations from './operations';\nimport * as charactersTypes from './types';\n\nexport {\n  charactersOperations,\n  charactersTypes,\n};\n\nexport default reducer;","import { combineReducers } from 'redux';\n\nimport charactersReducer from './ducks/characters';\n\nconst rootReducer = combineReducers({\n  characters: charactersReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;","import { CharacterRequestFilters, CharacterResponse } from \"../types/api/characters\";\n\nexport const getCharacters = async (\n  { page, ...filters }: CharacterRequestFilters\n): Promise<CharacterResponse> => {\n  let url = `https://rickandmortyapi.com/api/character/?page=${page}`;\n\n  Object.entries(filters)\n    .filter(([,value]) => value)\n    .forEach(([key, value]) => {\n      url += `&${key}=${value}`;\n    });\n\n  const res = await fetch(url);\n  const data = await res.json();\n\n  return data as CharacterResponse;\n}","import * as characters from './characters';\n\nconst api = {\n  characters,\n};\n\nexport default api;","import { put, takeEvery } from \"@redux-saga/core/effects\";\nimport api from \"../../api\";\nimport { charactersOperations, charactersTypes } from \"../ducks/characters\";\nimport { CharacterResponse } from \"../../types/api/characters\";\n\nfunction* fetchCharacters(action: any)\n{\n  try\n  {\n    const params = action.payload;\n    const data: CharacterResponse = yield api.characters.getCharacters(params);\n    if(data.error)\n    {\n      yield put(charactersOperations.fetchCharactersSuccess({ info: null, results: [] }));\n    }\n    else\n    {\n      yield put(charactersOperations.fetchCharactersSuccess(data));\n    }\n  }\n  catch (err)\n  {    \n    yield put(charactersOperations.fetchCharactersFail());\n  }\n}\n\nfunction* charactersSaga()\n{\n  yield takeEvery(charactersTypes.FETCH_CHARACTERS, fetchCharacters);\n}\n\nexport default charactersSaga;","import { all } from 'redux-saga/effects';\nimport charactersSaga from './characters';\n\nfunction* rootSaga()\n{\n  yield all([\n    charactersSaga(),\n  ]);\n}\n\nexport default rootSaga;","import createSagaMiddleware from '@redux-saga/core';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport rootReducer from './rootReducer';\nimport rootSaga from './sagas/rootSaga';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst enhancer = composeEnhancers(\n  applyMiddleware(sagaMiddleware),\n);\n\nconst store = createStore(rootReducer, enhancer);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import { Button, MenuItem, TextField, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../store/rootReducer';\nimport { charactersOperations } from '../../store/ducks/characters';\nimport { CharacterFiltersForForm } from \"../../types/api/characters\";\n\nconst FilterForm = () => {\n  const dispatch = useDispatch();\n  const { isLoading } = useSelector((s: RootState) => s.characters.characters);\n\n  const handleFilterApply = (filters: CharacterFiltersForForm) => {\n    const fs = Object.fromEntries(\n      Object.entries(filters).filter(([,value]) => value)\n    );\n\n    dispatch(charactersOperations.setFilters({...fs}));\n  };\n\n  const formik = useFormik<CharacterFiltersForForm>({\n    initialValues: {\n      name: '',\n      species: '',\n      type: '',\n      gender: '',\n      status: '',\n    },\n    onSubmit: handleFilterApply,\n  });\n\n  return(\n    <Box component=\"form\" sx={{p:1}} onSubmit={formik.handleSubmit}>\n      <Typography variant=\"h5\">\n        Filters\n      </Typography>\n\n      <TextField\n        disabled={isLoading}\n        sx={{mb:2}}\n        fullWidth\n        name=\"name\"\n        label=\"Name\"\n        variant=\"outlined\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n      />\n\n      <TextField\n        disabled={isLoading}\n        sx={{mb:2}}\n        fullWidth\n        name=\"species\"\n        label=\"Species\"\n        variant=\"outlined\"\n        value={formik.values.species}\n        onChange={formik.handleChange}\n      />\n\n      <TextField\n        disabled={isLoading}\n        sx={{mb:2}}\n        fullWidth\n        name=\"type\"\n        label=\"Type\"\n        variant=\"outlined\"\n        value={formik.values.type}\n        onChange={formik.handleChange}\n      />\n\n      <TextField\n        disabled={isLoading}\n        select\n        sx={{mb:2}}\n        fullWidth\n        name=\"gender\"\n        label=\"Gender\"\n        value={formik.values.gender}\n        onChange={formik.handleChange}\n      >\n        <MenuItem value=\"\">none</MenuItem>\n        <MenuItem value=\"female\">female</MenuItem>\n        <MenuItem value=\"male\">male</MenuItem>\n        <MenuItem value=\"genderless\">genderless</MenuItem>\n        <MenuItem value=\"unknown\">unknown</MenuItem>\n      </TextField>\n\n      <TextField\n        disabled={isLoading}\n        select\n        sx={{mb:2}}\n        fullWidth\n        name=\"status\"\n        label=\"Status\"\n        value={formik.values.status}\n        onChange={formik.handleChange}\n      >\n        <MenuItem value=\"\">none</MenuItem>\n        <MenuItem value=\"alive\">alive</MenuItem>\n        <MenuItem value=\"dead\">dead</MenuItem>\n        <MenuItem value=\"unknown\">unknown</MenuItem>\n      </TextField>\n      \n      <Box sx={{display:'flex'}}>\n        <Button\n          type=\"submit\"\n          variant=\"outlined\"\n          disabled={isLoading}\n        >Apply</Button>\n        <Button\n          onClick={() => formik.resetForm()}\n          disabled={isLoading}\n          sx={{ml:1}}\n          color=\"secondary\"\n          variant=\"text\"\n        >Clear</Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default FilterForm;","import React from 'react';\nimport { Avatar, IconButton, List, ListItem, ListItemAvatar, ListItemButton, ListItemText, ListSubheader, Typography } from \"@mui/material\";\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useInfiniteScroll } from '../../hooks/useInfiniteScroll';\nimport { RootState } from '../../store/rootReducer';\nimport { charactersOperations } from '../../store/ducks/characters';\nimport { Character } from '../../types/entities/characters';\n\nconst CharactersList = () => {\n  const dispatch = useDispatch();\n  const {\n    isLoading,\n    hasError,\n    currentPage,\n    filters,\n    characters,\n    pagination,\n  } = useSelector((s: RootState) => s.characters.characters);\n\n  const requestCharacters = () => {\n    dispatch(charactersOperations.fetchCharacters({\n      page: currentPage + 1,\n      ...filters,\n    }));\n  };\n\n  const observedRef = useInfiniteScroll(() => {\n    if(pagination && pagination.next)\n      requestCharacters();\n  });\n\n  React.useEffect(() => {\n    requestCharacters();\n  }, [filters]);\n\n  const setCurrentCharacter = (character: Character) => {\n    dispatch(charactersOperations.setCurrentCharacter(character));\n  };\n\n  return (\n    <List dense>\n      <ListSubheader key=\"list-subheader\">\n        <Typography variant=\"h4\" sx={{ color: 'text.primary' }}>\n          Characters\n          <IconButton\n            sx={{ ml: 2 }}\n            color=\"primary\"\n            onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}\n          >\n            <ArrowUpwardIcon />\n          </IconButton>\n          {pagination &&\n            <Typography variant=\"body2\" color=\"gray\">\n              Loaded {characters.length} of {pagination.count}\n            </Typography>\n          }\n        </Typography>\n      </ListSubheader>\n\n      {characters.map((character, i) => {\n        return i === characters.length - 1\n          ? (\n            <ListItem\n              key={character.id + i}\n              onClick={() => setCurrentCharacter(character)}\n              ref={observedRef}\n            >\n              <ListItemButton>\n                <ListItemAvatar>\n                  <Avatar alt={character.name} src={character.image} />\n                </ListItemAvatar>\n                <ListItemText\n                  primary={character.name}\n                  secondary={character.species}\n                />\n              </ListItemButton>\n            </ListItem>\n          ) : (\n            <ListItem\n              key={character.id + i}\n              onClick={() => setCurrentCharacter(character)}\n            >\n              <ListItemButton>\n                <ListItemAvatar>\n                  <Avatar alt={character.name} src={character.image} />\n                </ListItemAvatar>\n                <ListItemText\n                  primary={character.name}\n                  secondary={character.species}\n                />\n              </ListItemButton>\n            </ListItem>            \n          )\n      })}\n\n      {isLoading &&\n        <ListItem key=\"loading-item\">\n          <ListItemButton disabled>\n            <ListItemText primary=\"Loading...\" />\n          </ListItemButton>\n        </ListItem>\n      }\n\n      {!hasError && !isLoading && characters.length === 0 &&\n        <ListItem key=\"not-found-item\">\n          <ListItemButton disabled>\n            <ListItemText primary=\"Not found\" />\n          </ListItemButton>\n        </ListItem>\n      }\n\n      {characters.length !== 0 && pagination && !pagination.next &&\n        <ListItem key=\"last-item\">\n          <ListItemButton disabled>\n            <ListItemText primary={`Founded ${pagination.count} items`} />\n          </ListItemButton>\n        </ListItem>\n      }\n\n      {hasError &&\n        <ListItem key=\"error-item\">\n          <ListItemButton onClick={requestCharacters}>\n            <ListItemText\n              primary=\"Try again\"\n              secondary=\"Something went wrong\"\n            />\n          </ListItemButton>\n        </ListItem>\n      }\n    </List>\n  );\n};\n\nexport default CharactersList;","import React from \"react\";\n\nexport const useInfiniteScroll = (listener: () => void) => {\n  const prevRef = React.useRef(null);\n  const ref = React.useRef(null);\n\n  React.useEffect(() => {\n    if(!ref.current) return;\n    if(ref.current === prevRef.current) return;\n\n    prevRef.current = ref.current;\n\n    const handler: IntersectionObserverCallback = ([target]) => {\n      if(target.isIntersecting)\n        listener();\n    };\n\n    const options: IntersectionObserverInit = {\n      root: null,\n      rootMargin: `${window.innerHeight * 0.5}px`,\n      threshold: 0,\n    };\n\n    const observer = new IntersectionObserver(handler, options);\n    observer.observe(ref.current);\n\n    return () => {\n      observer.disconnect();\n    };\n  });\n\n  return ref;\n};","import { Chip, Dialog, DialogContent, DialogTitle } from '@mui/material';\nimport PersonPinIcon from '@mui/icons-material/PersonPin';\nimport HomeIcon from '@mui/icons-material/Home';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { charactersOperations } from '../../store/ducks/characters';\nimport { RootState } from '../../store/rootReducer';\n\n\nconst CharacterDialog = () => {\n  const dispatch = useDispatch();\n  const { currentCharacter } = useSelector((s: RootState) => s.characters.modal);\n\n  const closeDialog = () => {\n    dispatch(charactersOperations.setCurrentCharacter(null));\n  };\n\n  return (\n    <Dialog\n      open={!!currentCharacter}\n      onClose={closeDialog}\n    >\n      {currentCharacter && <>\n        <DialogTitle>\n          {currentCharacter.name}\n        </DialogTitle>\n        <DialogContent>\n          <img\n            style={{ width: '100%' }}\n            alt={currentCharacter.name}\n            src={currentCharacter.image}\n          />\n          {currentCharacter.status !== 'unknown' &&\n            <Chip\n              variant=\"outlined\"\n              color={currentCharacter.status === 'Alive' ? 'success' : 'error'}\n              label={currentCharacter.status}\n              sx={{ mt: 1, mr: 1 }}\n            />\n          }\n          {currentCharacter.species !== 'unknown' &&\n            <Chip\n              variant=\"outlined\"\n              color=\"default\"\n              label={currentCharacter.species}\n              sx={{ mt: 1, mr: 1 }}\n            />\n          }\n          {currentCharacter.gender !== 'unknown' &&\n            <Chip\n              variant=\"outlined\"\n              color=\"primary\"\n              label={currentCharacter.gender}\n              sx={{ mt: 1, mr: 1 }}\n            />\n          }\n          {currentCharacter.origin.name !== 'unknown' &&\n            <Chip\n              icon={<HomeIcon />}\n              variant=\"filled\"\n              color=\"primary\"\n              label={currentCharacter.origin.name}\n              sx={{ mt: 1, mr: 1 }}\n            />\n          }\n          {currentCharacter.location.name !== 'unknown' &&\n            <Chip\n              icon={<PersonPinIcon />}\n              variant=\"filled\"\n              color=\"default\"\n              label={currentCharacter.location.name}\n              sx={{ mt: 1, mr: 1 }}\n            />\n          }\n        </DialogContent>\n      </>}\n    </Dialog>\n  );\n};\n\nexport default CharacterDialog;","import { Container, Typography } from '@mui/material';\nimport FilterForm from './components/FilterForm';\nimport CharactersList from './components/CharactersList';\nimport CharacterDialog from './components/CharacterDialog';\n\n\nconst App = () => {\n  return (\n    <Container maxWidth=\"sm\">\n      <Typography variant=\"h4\" sx={{mb:2}}>\n        Rick and Morti API\n      </Typography>\n\n      <FilterForm />\n      <CharactersList />\n\n      <CharacterDialog />\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport './index.sass';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}